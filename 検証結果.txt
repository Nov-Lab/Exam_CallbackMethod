
■検証結果
＜デリゲート呼び出し＞
・コールバック処理全般に適している。

＜イベント呼び出し＞
・GUI操作におけるイベント処理に適している。
・イベントハンドラーを登録／解除する仕組みが備わっている。

＜MethodInfo.Invoke 呼び出し＞
・タイプセーフではなく、デバッグも扱いにくいので、特に事情がない限りは選ばない方が無難。


■デリゲート呼び出し
  呼び出し先での例外 = 発生個所で中断されるのでデバッグしやすい。
  型の安全性         = タイプセーフ。互換性があれば正確に一致しなくても良い。
  戻り値             = 返せる
  目印属性で自動収集 = 可能

  ＜ヘルプより抜粋＞
  ・デリゲートは、特定のパラメーター リストおよび戻り値の型を使用して、メソッドへの参照を表す型です。
  ・デリゲートはコールバック メソッドを定義するのに最適です。
  ・メソッドは、デリゲート型に正確に一致する必要がありません。


■MethodInfo.Invoke 呼び出し
  呼び出し先での例外 = 発生個所での中断ではなく、呼び出し元(Invoke の場所)まで戻されるため、デバッグが面倒。
  型の安全性         = 安全でない。引数も戻り値も object型なので、扱いには注意が必要。
  戻り値             = 返せる
  目印属性で自動収集 = 可能


■イベント呼び出し
  呼び出し先での例外 = 発生個所で中断されるのでデバッグしやすい。
  型の安全性         = タイプセーフ。EventArgs クラスから派生させたクラスで引数や戻り値を管理する。
  戻り値             = 返せる。ただし、EventArg のインスタンスはすべてのイベントハンドラーで共有されるため、イベントハンドラーごとに個別の戻り値を返すには工夫が要る。
  目印属性で自動収集 = 可能

  ＜ヘルプより抜粋＞
  ・イベントは、通常、グラフィカル ユーザー インターフェイスのボタン クリックやメニュー選択などのユーザー アクションを通知するために使用します。

